
Summary of Lattice and Monte Carlo Simulation Project:

1. **Lattice Construction**:
    - The `Lattice2D` class represents a 2D lattice grid where each node has an initial random kinetic energy.
    - The lattice is initialized with random values in the `initialize_particles` method.
    - Neighbors of each node can be obtained using the `get_neighbors` method, which checks the four cardinal directions (up, down, left, right).
    - The `update_particle_energy` method updates the kinetic energy of a specific node (i, j).
    - The `get_total_energy` method calculates the total kinetic energy of the entire lattice.

2. **Monte Carlo Simulation**:
    - The `MonteCarloSimulation` class handles the simulation using the Metropolis-Hastings algorithm to update particle energies.
    - The `metropolis_hastings` method selects a random neighbor of a particle, proposes a new energy for both the particle and its neighbor,
            and then uses the Metropolis acceptance criterion to decide whether to accept the new energies.
    - The `run_full_update` method applies the Metropolis-Hastings algorithm to every particle on the lattice in each Monte Carlo step, ensuring the entire lattice is updated.
    - The `time_to_thermalization` method tracks energy fluctuations over time and determines how long it takes for the system to
            thermalize by checking if the energy difference between steps falls below a threshold.

3. **Usage**:
    - The main script (`main.py`) creates a lattice, sets up the Monte Carlo simulation, and runs the simulation for a specified number of steps.
    - The script tracks the time to thermalization and prints the result.
    - The temperature parameter controls the probability of accepting energy changes that increase the system's energy.

4. **Error Fixes**:
    - The `AttributeError` related to `update_particle_energy` was fixed by adding this method to the `Lattice2D` class, allowing for proper energy updates.
    - The error with multiple values for `temperature` in the `metropolis_hastings` method was resolved by ensuring that arguments are passed correctly from the `run_full_update` method.

5. **Key Classes and Methods**:
    - `Lattice2D` Class:
        - `initialize_particles()`: Initializes the lattice with random kinetic energies.
        - `get_neighbors(i, j)`: Returns the neighbors of a particle at position (i, j).
        - `update_particle_energy(i, j, new_energy)`: Updates the energy of a particle at position (i, j).
        - `get_total_energy()`: Returns the total kinetic energy of the lattice.

    - `MonteCarloSimulation` Class:
        - `metropolis_hastings(i, j, temperature=1.0)`: Performs the Metropolis-Hastings algorithm on a particle and its neighbor.
        - `run_full_update(temperature=1.0)`: Applies the Metropolis-Hastings algorithm to all particles in the lattice.
        - `time_to_thermalization(tolerance=1e-3)`: Measures the number of steps until the system reaches thermalization.

6. **Key Improvements**:
    - Added proper handling of lattice updates and energy exchanges between neighbors.
    - Implemented tracking of the total energy over time to measure thermalization.
    - Fixed errors related to argument passing and method calls.

This project simulates Brownian motion on a lattice using Monte Carlo methods, focusing on energy exchanges between particles and tracking how long the system takes to reach equilibrium.
